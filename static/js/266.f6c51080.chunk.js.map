{"version":3,"file":"static/js/266.f6c51080.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contactOperations/selectors.js","components/Contacts/ContactsForm.jsx","components/Contacts/Filter.jsx","components/Contacts/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = store => store.contacts.items;\nexport const selectFilter = store => store.filter;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactOperations/operations';\nimport { selectContacts } from 'redux/contactOperations/selectors';\n\nfunction ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(e.currentTarget.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const checkAlert = contacts.some(\n      f => f.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n\n    if (checkAlert) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(9),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n  };\n\n  return (\n    <form className=\"contact-form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n      <label className=\"contact-form_label\" htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        className=\"contact-form_input\"\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Full name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label className=\"contact-form_label\" htmlFor=\"number\">\n        Tel.Number\n      </label>\n      <input\n        className=\"contact-form_input\"\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Tel. number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button className=\"contact-form_button-submit\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactsForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contactOperations/selectors';\nimport { onFilter } from 'redux/contactOperations/slice';\n\nconst Filter = () => {\n  const val = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(onFilter(e.currentTarget.value));\n  };\n\n  return (\n    <label className=\"filter-header\">\n      Find contacts by name{' '}\n      <input\n        className=\"filter-input\"\n        type=\"text\"\n        value={val}\n        onChange={changeFilter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactOperations/operations';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n} from 'redux/contactOperations/selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const normalizeFilter = filter?.toLocaleLowerCase();\n\n  const filterContacts = contacts.filter(fil => {\n    return fil.name.toLocaleLowerCase().includes(normalizeFilter);\n  });\n\n  const delContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      {filterContacts.length === 0 || (\n        <ul className=\"contact-list-block\">\n          {filterContacts.map(({ id, name, number }) => {\n            return (\n              <li key={id} className=\"contact-unit\">\n                <p className=\"contact-list-text\">\n                  {name}: {number}\n                </p>\n                <button\n                  type=\"button\"\n                  onClick={() => delContact(id)}\n                  className=\"delete-contact-button\"\n                >\n                  Удалить контакт\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import { useDispatch } from 'react-redux';\nimport ContactsForm from '../components/Contacts/ContactsForm';\nimport Filter from '../components/Contacts/Filter';\nimport ContactsList from 'components/Contacts/ContactsList';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactOperations/operations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section className=\"contact-container\">\n      <h1 className=\"contact-header\">Phonebook</h1>\n      <ContactsForm />\n\n      <h2 className=\"contact-header\">Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </section>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","store","contacts","items","selectFilter","filter","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","className","autoComplete","onSubmit","preventDefault","some","f","toLocaleLowerCase","alert","newContact","addContact","htmlFor","type","placeholder","onChange","pattern","title","required","val","onFilter","normalizeFilter","filterContacts","fil","includes","length","map","onClick","contactId","deleteContact","useEffect","fetchContacts"],"sourceRoot":""}